import { Plugin } from "vite";
import fs from "fs";
import path from "path";
import glob from "fast-glob";
const pluginName = "generate-markdown-types-plugin";
const outputPath = path.resolve("src/types/generated-markdown-types.ts");

const getTypeMap = async (globPath: string, base: string) => {
  const files = await glob(globPath);
  const groups: Record<string, string[]> = {};

  for (const file of files) {
    const relative = file.replace(`src/pages/${base}/`, "");
    const [group, _, filename] = relative.split("/");
    const name = path.basename(filename, ".md");

    groups[group] = groups[group] || [];
    groups[group].push(name);
  }

  return Object.entries(groups)
    .map(
      ([group, names]) =>
        `  ${JSON.stringify(group)}: { ${names
          .map((n) => `${JSON.stringify(n)}?: string`)
          .join("; ")} };`
    )
    .join("\n");
};

export const generate = async () => {
  const foundationTypes = await getTypeMap(
    "src/pages/foundations/**/markdowns/*.md",
    "foundations"
  );
  const componentTypes = await getTypeMap(
    "src/pages/components/**/markdowns/*.md",
    "components"
  );

  const content = `\
/** (!) This file is auto-generated by ${pluginName}. Do not edit manually. **/
export type MapFoundationToMarkdowns = {\n${foundationTypes}\n};
export type MapComponentToMarkdowns = {\n${componentTypes}\n};
`;
  console.log(content);
  fs.writeFileSync(outputPath, content, "utf-8");
  console.log(`âœ… Generated: ${outputPath}`);
};

generate();

const markdownTypesInjectPlugin = () => {
  return <Plugin>{
    name: pluginName,
    configResolved: () => {
      generate();
    },
  };
};
export default markdownTypesInjectPlugin;
